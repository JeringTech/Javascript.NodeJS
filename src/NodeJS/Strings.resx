<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentException_InvocationRequest_ModuleSourceCannotBeNull" xml:space="preserve">
    <value>If moduleSourceType is cache, moduleSource cannot be null.</value>
  </data>
  <data name="ArgumentException_InvocationRequest_ModuleSourceCannotBeNullWhitespaceOrAnEmptyString" xml:space="preserve">
    <value>If moduleSourceType is file or string, moduleSource cannot be null, whitespace or an empty string.</value>
  </data>
  <data name="ArgumentException_InvocationRequest_ModuleStreamSourceCannotBeNull" xml:space="preserve">
    <value>If moduleSourceType is stream, moduleStreamSource cannot be null.</value>
  </data>
  <data name="ArgumentException_NodeJSProcess_ProcessHasExited" xml:space="preserve">
    <value>The process has exited.</value>
  </data>
  <data name="ArgumentException_NodeJSProcess_ProcessHasNotBeenStartedOrHasBeenDisposed" xml:space="preserve">
    <value>The process has not been started or has been disposed of.</value>
  </data>
  <data name="InvalidOperationException_NodeJSProcessFactory_FailedToStartNodeProcess" xml:space="preserve">
    <value>Failed to start Node process. To resolve this:

[1] Ensure that NodeJS is installed and can be found in one of the PATH directories. The current PATH enviroment variable is: {0}. Make sure that the Node executable is in one of those directories, or update your PATH.

[2] Refer to the InnerException for further details.</value>
  </data>
  <data name="InvalidOperationException_InvocationRequest_StreamIsNull" xml:space="preserve">
    <value>Stream is null.</value>
  </data>
  <data name="InvalidOperationException_InvocationRequest_StreamIsUnseekable" xml:space="preserve">
    <value>Stream is unseekable.</value>
  </data>
  <data name="InvocationException_HttpNodeJSService_UnexpectedStatusCode" xml:space="preserve">
    <value>Received a HTTP response with an unexpected status code: {0}.</value>
  </data>
  <data name="ConnectionException_OutOfProcessNodeJSService_ConnectionAttemptTimedOut" xml:space="preserve">
    <value>NodeJS connection attempt timed out after {0}ms. ProcessID: {1}. Process exited: {2}. Exit status: {3}.</value>
  </data>
  <data name="InvocationException_OutOfProcessNodeJSService_InvocationTimedOut" xml:space="preserve">
    <value>Invocation timed out after {0}ms. You can change the timeout duration by setting {1}.{2}. Do ensure that your NodeJS function invokes its callback (or throws an exception if it is an async function).</value>
  </data>
  <data name="LogDebug_OutOfProcessNodeJSService_ReleasingProcessConnectionSemaphore" xml:space="preserve">
    <value>Releasing process connection semaphore, processID: {0}, thread ID: {1}, thread is ThreadPool thread : {2}.</value>
  </data>
  <data name="LogDebug_OutOfProcessNodeJSService_WaitingOnProcessConnectionSemaphore" xml:space="preserve">
    <value>Waiting on process connection semaphore, processID: {0}, thread ID: {1}, thread is ThreadPool thread : {2}.</value>
  </data>
  <data name="LogWarning_InvocationAttemptFailed" xml:space="preserve">
    <value>An invocation attempt failed. Retries using existing process remaining: {0}.
Exception:
  {1}</value>
  </data>
  <data name="ConnectionException_OutOfProcessNodeJSService_FailedToConnect" xml:space="preserve">
    <value>Failed to connect to NodeJS. Refer to the inner exception for details.</value>
  </data>
  <data name="LogWarning_ConnectionAttemptFailed" xml:space="preserve">
    <value>An attempt to connect to NodeJS failed. Retries remaining: {0}.
Exception:
  {1}</value>
  </data>
  <data name="LogInformation_ConnectedToNodeJSProcess" xml:space="preserve">
    <value>Connected to NodeJS process: {0}.</value>
  </data>
  <data name="LogInformation_FileChangedMovingtoNewNodeJSProcess" xml:space="preserve">
    <value>File changed: "{0}". Moving to new NodeJS process.</value>
  </data>
  <data name="LogInformation_KillingNodeJSProcess" xml:space="preserve">
    <value>Killing NodeJS process: {0}.</value>
  </data>
  <data name="ArgumentException_Shared_ValueCannotBeEmpty" xml:space="preserve">
    <value>Value cannot be empty.</value>
  </data>
  <data name="ArgumentException_Shared_ValueCannotBeNullWhitespaceOrAnEmptyString" xml:space="preserve">
    <value>Value cannot be null, whitespace or an empty string.</value>
  </data>
  <data name="LogInformation_HttpEndpoint" xml:space="preserve">
    <value>Connected to NodeJS through {0}. Endpoint: {1}.</value>
  </data>
  <data name="LogWarning_RetriesInExistingProcessExhausted" xml:space="preserve">
    <value>Retries in existing process exhausted. Process retries remaining: {0}.</value>
  </data>
  <data name="InvalidOperations_EmbeddedResourcesService_NoEmbeddedResourceWithSpecifiedName" xml:space="preserve">
    <value>No embedded resource with specified name: {0}.</value>
  </data>
  <data name="ConnectionException_OutOfProcessNodeJSService_ProcessExitedBeforeConnecting" xml:space="preserve">
    <value>Process with ID {0} exited before connecting.</value>
  </data>
  <data name="LogInformation_ProcessExitedBeforeConnecting" xml:space="preserve">
    <value>Process exited before connecting.</value>
  </data>
  <data name="InvalidOperationException_BlockDrain_OperationCountBelowMinimum" xml:space="preserve">
    <value>Operation count below minimum. This might be because ExitBlock is being called more than once for some EnterBlockAsync invocations. It could also be because DrainBlockAndPreventEntryAsync is being called multiple times without calls to ResetAfterDraining in between.</value>
  </data>
  <data name="Obsolete_MoveToNewProcess" xml:space="preserve">
    <value>Use MoveToNewProcessAsync instead since it allows for asynchronous waiting.</value>
  </data>
  <data name="ArgumentException_NodeJSProcess_ExpectedAStreamReader" xml:space="preserve">
    <value>Expected a StreamReader.</value>
  </data>
  <data name="LogDebug_OutOfProcessNodeJSService_StartingFileWatcher" xml:space="preserve">
    <value>Starting FileWatcher. Current process: {0}.</value>
  </data>
  <data name="LogDebug_OutOfProcessNodeJSService_StoppingFileWatcher" xml:space="preserve">
    <value>Stopping FileWatcher. Current process: {0}.</value>
  </data>
  <data name="LogDebug_InternalFileChangedHandlerCallDebounced" xml:space="preserve">
    <value>Internal file changed handler call debounced, file path: "{0}".</value>
  </data>
  <data name="LogDebug_InternalFileChangedHandlerCalled" xml:space="preserve">
    <value>Internal file changed handler called, file path: "{0}".</value>
  </data>
  <data name="LogInformation_InvokingRegisteredFileChangedHandlers" xml:space="preserve">
    <value>Invoking registered file changed handlers, file path: "{0}".</value>
  </data>
  <data name="LogDebug_FileChangedHandlerInvokedForProcess" xml:space="preserve">
    <value>File changed handler invoked for process: {0}.</value>
  </data>
</root>